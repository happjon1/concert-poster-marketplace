name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      # Backend steps
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      # Frontend steps
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: echo "Skipping frontend tests for now"

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # Upload artifacts for deployment job
      - name: Upload backend build
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/dist

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  deploy:
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend-build

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key verification
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          # Transfer backend files
          rsync -avz --delete backend-build/ $SSH_USER@$SSH_HOST:/var/www/concert-poster-marketplace/backend/dist/

          # Transfer frontend files
          rsync -avz --delete frontend-build/ $SSH_USER@$SSH_HOST:/var/www/concert-poster-marketplace/frontend/dist/

          # Create ecosystem.config.cjs and start PM2
          ssh $SSH_USER@$SSH_HOST '
            mkdir -p /var/www/concert-poster-marketplace/backend/logs
            cd /var/www/concert-poster-marketplace/backend
            
            # Create ecosystem.config.cjs directly on the server
            cat > ecosystem.config.cjs << EOF
module.exports = {
  apps: [{
    name: "poster-m",
    script: "./dist/server.js",
    instances: 1,
    exec_mode: "fork",
    env: {
      NODE_ENV: "production",
      PORT: 4000
    },
    error_file: "./logs/pm2-error.log",
    out_file: "./logs/pm2-out.log",
    merge_logs: true,
    log_date_format: "YYYY-MM-DD HH:mm:ss Z"
  }]
};
EOF
            
            # Start the application with PM2
            pm2 delete poster-m || true
            pm2 start ecosystem.config.cjs
            pm2 save
            
            # Verify the application is running
            echo "=== PM2 Status ==="
            pm2 list
            
            # Check if the server is listening on port 4000
            echo "=== Checking Port 4000 ==="
            if command -v ss &> /dev/null; then
              ss -tlnp | grep 4000 || echo "No process found on port 4000"
            elif command -v netstat &> /dev/null; then
              netstat -tlnp | grep 4000 || echo "No process found on port 4000"
            else
              echo "No port checking tools available"
            fi
          '
